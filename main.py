import asyncio
import schedule
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_BOT_TOKEN, logger, check_config
from storage import Storage
from parsers import VKParser, TwitterParser

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# Initialize storage and parsers
storage = Storage()
vk_parser = VKParser()
twitter_parser = TwitterParser()

def get_show_posts_keyboard(source_type: str, source_id: str) -> InlineKeyboardMarkup:
    """Create inline keyboard for showing posts"""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        "üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã",
        callback_data=f"show_posts:{source_type}:{source_id}"
    ))
    return keyboard

@dp.callback_query_handler(lambda c: c.data.startswith('show_posts:'))
async def process_show_posts(callback_query: types.CallbackQuery):
    """Handle show posts button click"""
    try:
        # Parse callback data
        _, source_type, source_id = callback_query.data.split(':')

        # Get posts based on source type
        if source_type == 'vk':
            posts = vk_parser.get_posts(source_id)
            source = next((s for s in storage.get_sources('vk') if s['id'] == source_id), None)
            if not source:
                await callback_query.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Send posts
            await callback_query.message.answer(f"üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã VK '{source['name']}':")
            for post in posts:
                message = f"{post['text']}\n\nüîó {post['link']}"
                await callback_query.message.answer(message)

        elif source_type == 'twitter':
            tweets = twitter_parser.get_tweets(source_id)
            source = next((s for s in storage.get_sources('twitter') if s['id'] == source_id), None)
            if not source:
                await callback_query.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Send tweets
            await callback_query.message.answer(f"üê¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã –æ—Ç {source['name']}:")
            for tweet in tweets:
                message = f"{tweet['text']}\n\nüîó {tweet['link']}"
                await callback_query.message.answer(message)

        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error showing posts: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤")

# Command handlers
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    # Add chat to receive messages
    storage.add_chat(message.chat.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ VK –∏ Twitter.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/add_vk_source <group_id> - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É VK\n"
        "/add_twitter_source <username> - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Twitter\n"
        "/list_sources - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
        "/remove_source <source_id> - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )

@dp.message_handler(commands=['stop'])
async def cmd_stop(message: types.Message):
    storage.remove_chat(message.chat.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/add_vk_source <group_id> - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É VK –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/add_twitter_source <username> - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Twitter –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/list_sources - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        "/remove_source <source_id> - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –µ–≥–æ ID\n"
        "/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/add_vk_source 123456\n"
        "/add_twitter_source elonmusk"
    )

@dp.message_handler(commands=['add_vk_source'])
async def cmd_add_vk_source(message: types.Message):
    try:
        group_id = message.text.split()[1]
        group_info = vk_parser.get_group_info(group_id)

        if not group_info:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É VK. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –≥—Ä—É–ø–ø—ã.")
            return

        if storage.add_source('vk', group_id, group_info['name']):
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ VK '{group_info['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_show_posts_keyboard('vk', group_id)
            )
        else:
            await message.answer("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã VK. –ü—Ä–∏–º–µ—Ä: /add_vk_source 123456")
    except Exception as e:
        logger.error(f"Error adding VK source: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã VK.")

@dp.message_handler(commands=['add_twitter_source'])
async def cmd_add_twitter_source(message: types.Message):
    try:
        username = message.text.split()[1]
        user_info = twitter_parser.get_user_info(username)

        if not user_info:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Twitter. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        if storage.add_source('twitter', username, user_info.name):
            await message.answer(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç Twitter '{user_info.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=get_show_posts_keyboard('twitter', username)
            )
        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Twitter. –ü—Ä–∏–º–µ—Ä: /add_twitter_source elonmusk")
    except Exception as e:
        logger.error(f"Error adding Twitter source: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Twitter.")

@dp.message_handler(commands=['list_sources'])
async def cmd_list_sources(message: types.Message):
    sources = storage.get_sources()
    if not sources['vk'] and not sources['twitter']:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n\n"

    if sources['vk']:
        response += "VK –≥—Ä—É–ø–ø—ã:\n"
        for source in sources['vk']:
            response += f"- {source['name']} (ID: {source['id']})\n"
            # Add show posts button for each source
            keyboard = get_show_posts_keyboard('vk', source['id'])
            await message.answer(response, reply_markup=keyboard)
            response = ""

    if sources['twitter']:
        response += "\nTwitter –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
        for source in sources['twitter']:
            response += f"- {source['name']} (@{source['id']})\n"
            # Add show posts button for each source
            keyboard = get_show_posts_keyboard('twitter', source['id'])
            await message.answer(response, reply_markup=keyboard)
            response = ""

@dp.message_handler(commands=['remove_source'])
async def cmd_remove_source(message: types.Message):
    try:
        source_id = message.text.split()[1]
        removed = False

        # Try to remove from VK sources
        if storage.remove_source('vk', source_id):
            removed = True

        # Try to remove from Twitter sources
        if storage.remove_source('twitter', source_id):
            removed = True

        if removed:
            await message.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: /remove_source 123456")

async def check_new_posts():
    """Check for new posts from all sources"""
    try:
        # Get all chat IDs that should receive messages
        chat_ids = storage.get_chats()
        if not chat_ids:
            logger.info("No chats registered to receive messages")
            return

        # Check VK sources
        for source in storage.get_sources('vk'):
            posts = vk_parser.get_new_posts(source['id'], source['last_post_id'])
            for post in reversed(posts):
                message = (
                    f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã VK '{source['name']}':\n\n"
                    f"{post['text']}\n\n"
                    f"üîó {post['link']}"
                )
                # Send message to all registered chats
                for chat_id in chat_ids:
                    try:
                        await bot.send_message(chat_id=chat_id, text=message)
                    except Exception as e:
                        logger.error(f"Error sending message to chat {chat_id}: {e}")
                storage.update_last_post_id('vk', source['id'], post['id'])

        # Check Twitter sources
        for source in storage.get_sources('twitter'):
            tweets = twitter_parser.get_tweets(source['id'], source['last_post_id'])
            for tweet in reversed(tweets):
                message = (
                    f"üê¶ –ù–æ–≤—ã–π —Ç–≤–∏—Ç –æ—Ç {source['name']}:\n\n"
                    f"{tweet['text']}\n\n"
                    f"üîó {tweet['link']}"
                )
                # Send message to all registered chats
                for chat_id in chat_ids:
                    try:
                        await bot.send_message(chat_id=chat_id, text=message)
                    except Exception as e:
                        logger.error(f"Error sending message to chat {chat_id}: {e}")
                storage.update_last_post_id('twitter', source['id'], tweet['id'])

    except Exception as e:
        logger.error(f"Error checking new posts: {e}")

async def scheduler():
    """Run the scheduler"""
    while True:
        await check_new_posts()
        await asyncio.sleep(600)  # 10 minutes

async def main():
    # Check configuration
    if not check_config():
        logger.error("Missing required environment variables. Please check your .env file.")
        return

    # Start the scheduler
    asyncio.create_task(scheduler())

    # Start the bot
    logger.info("Starting bot...")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
